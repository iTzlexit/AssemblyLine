<div class="modal fade @_modalClass" id="informationalModal" tabindex="-1" aria-labelledby="informationalModalLabel" role="dialog" style="display:@_modalDisplay">
    <div class="modal-dialog modal-lg">
        <div class="modal-content pa-4">
            <div class="modal-header ">
                <h5 class="modal-title" id="informationalModalLabel">Add new Device</h5>
                <button @onclick="CloseModal" type="button" class="custom-close-btn" aria-label="Close"></button>
            </div>


            <div class="modal-body">







            </div>

            <div class="modal-footer-custom">
                <button type="submit" class="btn-submit d-flex align-items-center justify-content-center gap-3">
                    
                  Submit
                </button>

                <button @onclick="() => CloseModal()" class="btn-closer d-flex align-items-center justify-content-center gap-3">
                  Close
                </button>

             
            </div>
        </div>
    </div>
</div>


@if (_showBackdrop == true)
{
    <div class="modal-backdrop fade show"></div>
}


@code {
    [Parameter] public EventCallback ParentMethodToCallOnClickBtnClose { get; set; }
    private string _modalDisplay = null;
    private string _modalClass = null;
    private bool _showBackdrop = false;

    protected override void OnInitialized() => ShowModal();

    private void ShowModal()
    {
        _modalDisplay = "block;";
        _modalClass = "show";
        _showBackdrop = true;
    }

    private async void CloseModal()
    {
      
        _modalDisplay = "none";
        _modalClass = string.Empty;
        _showBackdrop = false;
        await ParentMethodToCallOnClickBtnClose.InvokeAsync();
    }

}
