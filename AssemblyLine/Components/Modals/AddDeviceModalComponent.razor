@inject IAddDeviceUseCase _addDeviceUseCase
@inject IFetchDeviceTypes _fetchDeviceOperationandAssemblyUseCase
    

@using ApplicationLayer.Devices.Interfaces
@using AssemblyLine.ApplicationLayer.DTO


<div class="modal fade @_modalClass" id="informationalModal" tabindex="-1" aria-labelledby="informationalModalLabel" role="dialog" style="display:@_modalDisplay">
    <div class="modal-dialog modal-lg">
        <div class="modal-content pa-4">
            <div class="modal-header ">
                <h5 class="modal-title" id="informationalModalLabel">Add new device</h5>
                <button @onclick="CloseModal" type="button" class="custom-close-btn" aria-label="Close"></button>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }
            <EditForm Model="deviceAddRequest" OnValidSubmit="SubmitHandler">
                <DataAnnotationsValidator />
                <div class="modal-body">

                    <div class="row">

                        <div class="col-md-6">

                            
                            <div>
                                <label for="order">Device Name </label>
                                <input min="1" type="text" class="general-input" @bind-value="@deviceAddRequest.Name" />
                                <ValidationMessage For="@(() => deviceAddRequest.Name)" />


                            </div>


                        </div>

                        <div class=" col-md-6">
                            <div>
                                <label for="deviceType"> Select a device type</label>
                                <select id="deviceType" class="general-select" @onchange="SelectDeviceTypeChange">
                                    <option value="0" class="general-input">---------Select----------</option>
                                    @foreach (var deviceTypes in responseForDeviceTypes)
                                    {
                                        <option value="@deviceTypes.ID" class="general-input"> @deviceTypes.Name</option>
                                    }
                                </select>
                                <ValidationMessage For="@(() => deviceAddRequest.DeviceTypeId)" />

                            </div>


                        </div>



                    </div>



                </div>

                <div class="modal-footer-custom">
                    <button type="submit" class="btn-submit d-flex align-items-center justify-content-center gap-3">

                        Submit
                    </button>

                    <button @onclick="() => CloseModal()" class="btn-closer d-flex align-items-center justify-content-center gap-3">
                        Close
                    </button>


                </div>


            </EditForm>




        </div>
    </div>
</div>


@if (_showBackdrop == true)
{
    <div class="modal-backdrop fade show"></div>
}


@code {
    [Parameter] public EventCallback ParentMethodToCallOnClickBtnClose { get; set; }
    [Parameter]
    public EventCallback Refresh { get; set; }
    public List<ResponseForDeviceTypes>  responseForDeviceTypes { get; set; } = new();


    public DeviceAddRequest deviceAddRequest { get; set; } = new();


    public string errorMessage = string.Empty;

    [Parameter]
    public int assemblyId { get; set; } = 0;
    [Parameter]
    public int operationId { get; set; } = 0;

    public int deviceTypeId { get; set; } = 0;

    private string _modalDisplay = null;
    private string _modalClass = null;
    private bool _showBackdrop = false;


    protected override async Task OnParametersSetAsync()
    {
        deviceAddRequest.AssemblyId = assemblyId;
        deviceAddRequest.OperationId = operationId;
        responseForDeviceTypes = (await _fetchDeviceOperationandAssemblyUseCase.Executeasync()).ToList();
        ShowModal();
    }

    private async Task SubmitHandler()
    {
        try
        {
            await _addDeviceUseCase.ExecuteAsync(deviceAddRequest);
            await Refresh.InvokeAsync();
            CloseModal();
        }
        catch (Exception ex)
        {

            errorMessage = ex.Message;
        }
    }

    // Modal methods

    private void ShowModal()
    {
        _modalDisplay = "block;";
        _modalClass = "show";
        _showBackdrop = true;
    }

    private async void CloseModal()
    {

        _modalDisplay = "none";
        _modalClass = string.Empty;
        _showBackdrop = false;
        await ParentMethodToCallOnClickBtnClose.InvokeAsync();
    }



    private void SelectDeviceTypeChange(ChangeEventArgs changeEventArgs)
    {
        deviceTypeId = Convert.ToInt32(changeEventArgs.Value);
        deviceAddRequest.DeviceTypeId = deviceTypeId;

    }

}
