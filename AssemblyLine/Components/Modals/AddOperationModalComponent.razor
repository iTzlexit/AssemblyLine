@inject IFetchAssemblyWithDefaultOrderNumber _fetchAssemblyWithDefaultOrderNumber
@inject IAddOperationUseCase _addOperationUseCase

@using ApplicationLayer.Assembly.Interface

@using AssemblyLine.ApplicationLayer.DTO



<div class="modal fade @_modalClass" id="informationalModal" tabindex="-1" aria-labelledby="informationalModalLabel" role="dialog" style="display:@_modalDisplay">
    <div class="modal-dialog modal-lg">
        <div class="modal-content pa-4">
            <div class="modal-header ">
                <h5 class="modal-title" id="informationalModalLabel">Add new operation</h5>
                <button @onclick="CloseModal" type="button" class="custom-close-btn" aria-label="Close"></button>
            </div>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }
            <EditForm Model="operationAddRequest" OnValidSubmit="SubmitHandler">
                <DataAnnotationsValidator />
                   <div class="modal-body">

                <div class="row">

                    <div class="col-md-6">

                        <div>
                            <label for="assembly"> Select an assembly</label>
                                <select id="assembly" class="general-select" @onchange="SelectAssemblyChange">
                                <option value="0" class="general-input">---------Select----------</option>
                                @foreach (var assem in assemblyResponse)
                                {
                                    <option value="@assem.Id" class="general-input"> @assem.AssemblyName</option>
                                }
                            </select>
                                <ValidationMessage For="@(() => operationAddRequest.AssemblyId)" />

                        </div>
                    <div>
                            <label for="order">Order of operation </label>
                            <input min="1" type="number" class="general-input" @bind-value="@operationAddRequest.OrderInWhichToPerform" />
                                <ValidationMessage For="@(() => operationAddRequest.OrderInWhichToPerform)" />
                             
                              
                    </div>

                   


                    </div>

                    <div class=" col-md-6">
                        <div>
                                <label for="operationName">Name of operation</label>
                                <input type="text" class="general-input" @bind-value="@operationAddRequest.Name"/>
                                <ValidationMessage For="@(() => operationAddRequest.Name)" />

                        </div>
                     
                        <div>
                                <img />
                                <input type="file" />
                        </div>
                       

                    </div>



                </div>



            </div>

            <div class="modal-footer-custom">
                <button type="submit" class="btn-submit d-flex align-items-center justify-content-center gap-3">

                    Submit
                </button>

                <button @onclick="() => CloseModal()" class="btn-closer d-flex align-items-center justify-content-center gap-3">
                    Close
                </button>


                </div>


            </EditForm>
         


       
        </div>
    </div>
</div>


@if (_showBackdrop == true)
{
    <div class="modal-backdrop fade show"></div>
}


@code {
    [Parameter] public EventCallback ParentMethodToCallOnClickBtnClose { get; set; }
    [Parameter]
    public EventCallback Refresh { get; set; }
    public List<AssemblyResponse> assemblyResponse { get; set; } = new();
    public OperationAddRequest operationAddRequest { get; set; } = new();
    public string errorMessage = string.Empty; 


    public int AssemblyId { get; set; } = 0;

    private string _modalDisplay = null;
    private string _modalClass = null;
    private bool _showBackdrop = false;

    protected override async Task OnInitializedAsync()
    {
        assemblyResponse = (await _fetchAssemblyWithDefaultOrderNumber.ExecuteAsync(operationAddRequest.AssemblyId)).ToList();
        ShowModal();
    }


    private void SelectAssemblyChange(ChangeEventArgs changeEventArgs)
    {
        AssemblyId = Convert.ToInt32(changeEventArgs.Value);
        operationAddRequest.AssemblyId = AssemblyId;

        var selectedAssembly = assemblyResponse.FirstOrDefault(a => a.Id == AssemblyId);
        if (selectedAssembly != null)
        {
            operationAddRequest.OrderInWhichToPerform = selectedAssembly.DefaultOrderNumber;
        }
        else
        {
            operationAddRequest.OrderInWhichToPerform = 0; // Or any default value for non-selected assemblies
        }
    }


    private async Task SubmitHandler()
    {
        try
        {
            await _addOperationUseCase.ExecuteAsync(operationAddRequest);
            await Refresh.InvokeAsync(); 
            CloseModal();
        }
        catch (Exception ex)
        {

            errorMessage = ex.Message; 
        }
    }

    // Modal methods

    private void ShowModal()
    {
        _modalDisplay = "block;";
        _modalClass = "show";
        _showBackdrop = true;
    }

    private async void CloseModal()
    {

        _modalDisplay = "none";
        _modalClass = string.Empty;
        _showBackdrop = false;
        await ParentMethodToCallOnClickBtnClose.InvokeAsync();
    }

}
