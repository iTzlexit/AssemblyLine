@using AssemblyLine.ApplicationLayer.DTO
@inject IDeleteOperationUseCase _deleteOperationUseCase
@inject IJSRuntime _JSRuntime;


@foreach (var op in Operations)
{
    <tr class=""></tr>
    <tr class=" ">

        <td class=""></td>
        <td class="">@op.OrderInWhichToPerform</td>
        <td class="">@op.Name</td>
        <td class="">@op.DeviceName</td>
        <td class="">@op.DeviceType</td>
        <td class="cell ">

            <div class="d-flex align-items-center gap-3">
               

                @if (string.IsNullOrEmpty(op.DeviceName))
                {
                    <button @onclick="() => ShowAddDeviceModal(op.AssemblyId, op.OperationId)" class="btn-device d-flex align-items-center justify-content-center gap-3">
                        <i class="fa-solid fa-plus add-icon"></i>
                        <span>Add Device</span>
                    </button>
                }
                else
                {
                    <button  @onclick="() => ShowConditionModalWindow(op.AssemblyId, op.OperationId, op.Name)" class="btn-device d-flex align-items-center justify-content-center gap-3">
                        <i class="fa-solid fa-plus add-icon"></i>
                        <span>Add Device</span>
                    </button>
                }
              

                <button class="delete-button" @onclick="() => DeleteOperation(op.OperationId, op.Name)">
                    <i class="fa-solid fa-trash icon"></i>
                </button>

            </div>
           

        </td>


    </tr>
}


@if (_showAddDeviceModalWindow == true)
{
    <AddDeviceModalComponent Refresh="Refresh" assemblyId="@assemblyId" operationId="@operationId" ParentMethodToCallOnClickBtnClose="() => _showAddDeviceModalWindow = false"></AddDeviceModalComponent>
}

@code {
    [Parameter]
    public List<OperationResponse> Operations { get; set; } = new List<OperationResponse>();
    [Parameter]
    public EventCallback Refresh { get; set; }


    private string confirmDeleteMessage = "Are you sure you want to delete the operation \"{0}\"?";
    private string confirmAssignNewDevice = "This operation already has a device assigned. Are you sure you want to assign a new device?";
    private bool ConfirmResult { get; set; }
    private bool _showAddDeviceModalWindow = false;

    public int assemblyId { get; set; } = 0;
    public int operationId { get; set; } = 0;


    private async void ShowConditionModalWindow(int assemblyIdSelected, int operationIdSelected, string operationName)
    {
        if (string.IsNullOrEmpty(operationName))
        {
            _showAddDeviceModalWindow = true;
        }
        else
        {
            ConfirmResult = await _JSRuntime.InvokeAsync<bool>("confirm", confirmAssignNewDevice);
            if (ConfirmResult)
            {
                _showAddDeviceModalWindow = true;
            }
        }

        assemblyId = assemblyIdSelected;
        operationId = operationIdSelected;
        StateHasChanged();
    }

    private void ShowAddDeviceModal(int assemblyIdSelected, int operationIdSelected)
    {

        assemblyId = assemblyIdSelected;
        operationId = operationIdSelected;
        _showAddDeviceModalWindow = !_showAddDeviceModalWindow;
        StateHasChanged();
    }

    protected async Task DeleteOperation(int operationId, string operationName)
    {
        ConfirmResult = await _JSRuntime.InvokeAsync<bool>("confirm", string.Format(confirmDeleteMessage, operationName)); // type

        if (ConfirmResult)
        {

            await _deleteOperationUseCase.ExecuteAsync(operationId);
            await Refresh.InvokeAsync(); // Refreshing the list

        }
        else
        {
            return;
        }


    }
}
