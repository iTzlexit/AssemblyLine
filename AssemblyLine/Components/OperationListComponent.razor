@inject IGetListOfOperationsUseCase _getListOfOperationsUseCase
@inject IFetchAssembliesUseCase _fetchAssembliesUseCase
@using ApplicationLayer.DTO
@using AssemblyLine.ApplicationLayer.Assembly.Interface



<div class="page-container">

    <div class="btn-table-container  ">

        <div class="top-section mb-3 gap-3">
            <button @onclick="() => ShowAddOperationModal() " class="btn-operation d-flex align-items-center justify-content-center gap-3">
                <i class="fa-solid fa-plus add-icon"></i>
                <span>Add Operation</span>
            </button>

            <button @onclick="() => ShowAddDeviceModal()" class="btn-device d-flex align-items-center justify-content-center gap-3">
                <i class="fa-solid fa-plus add-icon"></i>
                <span>Add Device</span>
            </button>

            <select id="assembly" class="general-select" @onchange="SelectAssembly">
                @foreach (var assem in assemblyResponse)
                {
                    <option value="@assem.Id" class="general-option">@assem.AssemblyName</option>
                }
            </select>

        </div>
        <div>

         



        </div>

        <div class="">




            <div class="table-container">
                <div class="table-responsive ">
                    <table class="table table-hover  ">
                        <thead class=" ">
                            <tr class="table-head text-white">
                                <th class=" text-nowrap">Image</th>
                                <th class=" text-nowrap">Order</th>
                                <th class=" text-nowrap">Operation</th>
                                <th class=" text-nowrap">Device Name</th>
                                <th class=" text-nowrap">Device Type</th>
                                <th class=" text-nowrap">Actions</th>


                            </tr>
                        </thead>
                    
                        <tbody>

                            <OperationListItemComponent  Refresh="RefreshData" Operations="Operations"></OperationListItemComponent>

                        </tbody>

                    </table>

                    @if (!string.IsNullOrEmpty(errorMessages))
                    {
                        <div class="alert alert-danger" role="alert">
                            <p>@errorMessages  </p>
                        </div>
                    }
                </div>

            </div>
        </div>

    </div>

</div>

@if (_showAddDeviceModalWindow == true)
{
    <AddDeviceModalComponent ParentMethodToCallOnClickBtnClose="() => _showAddDeviceModalWindow = false"></AddDeviceModalComponent>
}

@if (_showAddOperationModalWindow == true)
{
    <AddOperationModalComponent Refresh="RefreshData" ParentMethodToCallOnClickBtnClose="() => _showAddOperationModalWindow = false"></AddOperationModalComponent>
}


@code
{

    //For the grid
    public List<OperationResponse> Operations { get; set; } = new List<OperationResponse>();

    private int MinAssemblyId = 0; 




    public List<AssemblyResponse> assemblyResponse { get; set; } = new();
    public int? SelectedAssembly { get; set; } = 0;

    private string errorMessages = string.Empty;

    private bool _showAddDeviceModalWindow = false;
    private bool _showAddOperationModalWindow = false;

    private void ShowAddDeviceModal()
    {
        _showAddDeviceModalWindow = !_showAddDeviceModalWindow;
        StateHasChanged();
    }

    private void ShowAddOperationModal()
    {
        _showAddOperationModalWindow = !_showAddOperationModalWindow;
        StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
 
    }

    private async Task RefreshData()
    {
        try
        {
            Operations = (await _getListOfOperationsUseCase.ExecuteAsync(SelectedAssembly)).ToList();
            assemblyResponse = (await _fetchAssembliesUseCase.ExecuteAsync()).ToList();

        }
        catch (Exception ex)
        {

            errorMessages = ex.Message;
        }


    }


    private async void SelectAssembly(ChangeEventArgs e)
    {
        SelectedAssembly = Convert.ToInt32(e.Value);
        await RefreshData();
    }
}
